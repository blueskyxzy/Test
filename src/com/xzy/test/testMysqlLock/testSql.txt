测试数据库死锁情况，深入理解数据库锁

总结：
二级封锁协议对应READ-COMMITTED隔离级别，本质是事务A在修改数据M后立刻加X锁，事务B不能修改数据M，同时不能查询到最新的数据M(避免脏读)，查询到的数据M是上一个版本(Innodb MVCC快照)的。
优点：1.避免脏读。
缺点：可能会造成如下后果      丢失更新。        不可重复读。        幻读。

三级封锁协议#
三级封锁协议对应REPEATABLE-READ隔离级别,本质是二级封锁协议基础上，对读到的数据M瞬间加上共享锁，直到事务结束才释放（保证了其他事务没办法修改该数据），这个级别是MySql 5.5 默认的隔离级别。
优点：
1.避免脏读。
2.避免不可重复读。幻读。
缺点：
丢失更新。



Mysql,InnoDb的锁

    共享锁：允许持有锁的事务读取一行数据

    排他锁：允许持有锁的事务更新或者删除一行数据

    意图锁：
        innodb支持多重粒度锁，即行锁和表锁共存
        意图共享锁（IS）表明一个事务对表中个别数据设置一个共享锁
        意图排他锁（IX）表明一个事务对表中个别数据设置一个排他锁
    如 SELECT ... LOCK IN SHARE MODE  将会对查询的表设置意图共享（IS）锁， SELECT ... FOR UPDATE 将会对查询的表设置意图排他锁

    记录锁：是一个索引记录的锁
    如 SELECT c1 FROM t WHERE c1 = 10 FOR UPDATE  会对表t中c1=10的记录们（此处可以是多条数据）加记录锁，以免其他事务对c1=10的数据们做插入、更新、删除操作

    gap锁，间隙锁：区间锁是一种索引记录之间或者某索引记录之前或者 某索引记录之后的锁
    当事务隔离级别为 读已提交或者启用配置 innodb_locks_unsafe_for_binlog （此配置现已禁用）时，在搜索或者索引扫描是 区间锁是禁用的
    举例0： SELECT c1 FROM t WHERE c1 BETWEEN 10 and 20 FOR UPDATE;

    临键锁(Next-Key Locks)：间隙锁是一种记录锁和区间（索引之前）锁的组合锁

    插入意图锁：插入意图锁是在执行插入操作时的一种区间锁。此锁是为了多个事务在同一个索引区间锁之间插入时不必等待。

    自增锁：是一个事务在自增列中插入数据时产生的一种特殊的表级锁


InnoDb引擎中不同sql语句设置锁如下：
1.SELECT ... FROM 一个读语句，读取数据库的快照过程中不会设置锁，除非将事务隔离级别设置为SERIALIZABLE。
2.SELECT ... FOR UPDATE 或者 SELECT ... LOCK IN SHARE MODE, 会为每个扫描到的行设置锁，并且为不符合条件的数据释放锁，有时候，不会立刻释放锁
3.SELECT ... LOCK IN SHARE MODE 语句在所有搜索到的索引设置共享间隙锁，然而，通过一个唯一索引搜索到唯一行就会产生一个索引记录锁
4.SELECT ... FOR UPDATE ， 语句在所有搜索到的索引设置排他（独占）间隙锁 。然而，通过一个唯一索引搜索到唯一行就会产生一个索引记录锁
5.INSERT 语句对插入的行设置排他（独占）锁。这个锁是一个索引记录锁，而不是间隙锁，并且不会阻止其他会话在插入的行之前区间中插入数据


select * from t where id=1;则是快照读(SnapShot Read)，它并不加锁
select * from t where id=1 for update;它会在id=1的索引记录上加锁，以阻止其他事务插入

select * from t where id between 8 and 15 for update;会封锁区间，以阻止其他事务id=10的记录插入


(1)InnoDB的索引与行记录存储在一起，这一点和MyISAM不一样；
(2)InnoDB的聚集索引存储行记录，普通索引存储PK，所以普通索引要查询两次；
(3)记录锁锁定索引记录；
(4)间隙锁锁定间隔，防止间隔中被其他事务插入；
(5)临键锁锁定索引记录+间隔，防止幻读；


InnoDB还将锁细分为如下几种子类型：
record lock（RK）
锁直接加在索引记录上面，锁住的是key
gap lock（GK）
间隙锁，锁定一个范围，但不包括记录本身。GAP锁的目的，是为了防止同一事务的两次当前读，出现幻读的情况。
next key lock（NK）
行锁和间隙锁组合起来就叫Next-Key Lock
insert intention lock（IK）
如果插入前，该间隙已经由gap锁，那么Insert会申请插入意向锁。
因为了避免幻读，当其他事务持有该间隙的间隔锁，插入意向锁就会被阻塞（不用直接用gap锁，是因为gap锁不互斥）。


gap锁是为了解决幻读问题，排他X锁为了解决read commit问题，

死锁排查和解决：
select @@global.tx_isolation 查询事务隔离级别
set session transaction isolation level X;设置事务的隔离级别：
X取：
read uncommitted
read committed
repeatable read
serializable

1、查询是否锁表
show open tables where in_use>0;
2、查询进程
show processlist
查询到相对应的进程，然后 kill id    ，这里是threadId
3、查看正在锁的事务
select * from information_schema.innodb_locks;
4、查看等待锁的事务
select * from information_schema.innodb_lock_waits;
select * from information_schema.innodb_trx 查所有事务
可以通过 innodb_deadlock_detect 配置选项禁用死锁检测，innodb还提供了innodb_lock_wait_timeout 配置在死锁情况下回滚事务。

show engine innodb status;查看锁的情况。

要模拟并发事务，需要修改事务自动提交这个选项，每个session要改为手动提交。
手动模拟事务
set session autocommit=0;以手动控制事务的提交。
show session variables like "autocommit"
show glabal variables like "autocommit"
可以看到，修改session变量，并不影响global变量，全局其他的session仍然是ON

实验1：间隙锁互斥
初始化：
create table t (
id int(10) primary key
)engine=innodb;

start transaction;
insert into t values(1);
insert into t values(3);
insert into t values(10);
commit;



session A：
set session autocommit=0;
start transaction;
delete from t where id=5;

session B：
set session autocommit=0;
start transaction;
insert into t values(0);
insert into t values(2);
insert into t values(12);
insert into t values(7);
 

事务B插入的值：0, 2, 12都不在(3, 10)区间内，能够成功插入，而7在(3, 10)这个区间内，会阻塞。

查看锁情况：

------------
TRANSACTIONS
------------
Trx id counter 23960
Purge done for trx's n:o < 23960 undo n:o < 0 state: running but idle
History list length 102
LIST OF TRANSACTIONS FOR EACH SESSION:
---TRANSACTION 281479531251928, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 281479531251024, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 281479531249216, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 281479531248312, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 281479531247408, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 23955, ACTIVE 13 sec inserting
mysql tables in use 1, locked 1
LOCK WAIT 2 lock struct(s), heap size 1136, 1 row lock(s), undo log entries 3
MySQL thread id 32, OS thread handle 123145457049600, query id 469 localhost 127.0.0.1 root update
insert into t values(7)
------- TRX HAS BEEN WAITING 13 SEC FOR THIS LOCK TO BE GRANTED:
RECORD LOCKS space id 1194 page no 3 n bits 80 index PRIMARY of table `test`.`t` trx id 23955 lock_mode X locks gap before rec insert intention waiting
Record lock, heap no 4 PHYSICAL RECORD: n_fields 3; compact format; info bits 0
 0: len 4; hex 8000000a; asc     ;;
 1: len 6; hex 000000005d8d; asc     ] ;;
 2: len 7; hex e300000161012a; asc     a *;;

------------------


分析：
mysql tables in use 1 locked 1 表明当前的事务使用有个表，表上有一个表锁
LOCK WAIT表示正在等待锁, 2 lock struct(s) 表示trx->trx_locks锁链表的长度为2，每个链表节点代表该事务持有的一个锁结构，包括表锁，记录锁以及auto_inc锁等
heap size 1136 表示事务分配的锁堆内存大小,一般没有什么具体的用处。
1 row lock(s)表示当前事务持有的行记录锁/gap 锁的个数。
insert into t values(7) 表示事务1在执行的sql ，show engine innodb status 是查看不到完整的事务的sql 的，通常显示当前正在等待锁的sql。
RECORD LOCKS space id 1194 page no 3 n bits 80 index PRIMARY of table `test`.`t` trx id 23955 lock_mode X locks gap before rec insert intention waiting Record lock

RECORD LOCKS 表示记录锁,space id为1194,page号3 ，n bits 80表示这个聚集索引记录锁结构上留有80个Bit位
表示事务 正在等待表 test.t 上的 正在等待插入意向锁 lock_mode X locks gap before rec insert intention waiting (LOCK_X + LOCK_REC_GAP )
这里需要各位注意的是锁组合，类似lock_mode X waiting ,lock_mode X,lock_mode X locks gap before rec insert intention waiting 是我们分析死锁的核心重点

MySQL有两种常规锁模式
LOCK_S（读锁，共享锁）
LOCK_X（写锁，排它锁）
最容易理解的锁模式，读加共享锁，写加排它锁.
有如下几种锁的属性
LOCK_REC_NOT_GAP        （锁记录）
LOCK_GAP                       （锁记录前的GAP）
LOCK_ORDINARY              （同时锁记录+记录前的GAP 。传说中的Next Key锁）
LOCK_INSERT_INTENTION（插入意向锁，其实是特殊的GAP锁）
锁的属性可以与锁模式任意组合。例如.
lock->type_mode 可以是Lock_X 或者Lock_S
locks gap before rec  表示为gap锁：lock->type_mode & LOCK_GAP
locks rec but not gap 表示为记录锁，非gap锁：lock->type_mode & LOCK_REC_NOT_GAP
insert intention          表示为插入意向锁：lock->type_mode & LOCK_INSERT_INTENTION
waiting                       表示锁等待：lock->type_mode & LOCK_WAIT

这里的参考文档地址为：http://blog.itpub.net/22664653/viewspace-2145133/的知识，感谢！

实验二
3个session
set session autocommit = 0;
start transaction;
insert into t value(7)


后面两个会阻塞，第一个rollback, 排它锁释放，后面PK检验，先获取共享锁，然后排它锁，阻塞，
死锁检查机制会让一个插入成功，一个自动放弃


实验三
A:set session autocommit = 0;
A:start transaction;
A:delete from t where id = 6;

B:set session autocommit = 0;
B:start transaction;
B:delete from t where id = 7;

A:insert into t value(5);
B：insert into t value(8);












